"""
:platform: Windows
:synopsis: This module is mostly generated code from QtDesigner. It describes the format of the settings
    dialog for editing the port of the ADC.
:moduleauthor: Michael Eller <mbe9a@virginia.edu>
"""

from PyQt5 import QtCore, QtGui, QtWidgets
from serial.tools import list_ports_windows
from settings_interface import save_port_configuration, read_port_configuration


class Ui_Dialog(object):
    """
    The graphical structure of this *Ui_Dialog* was generated by QtDesigner.
    The window allows the user to view available serial ports and choose one.
    """

    def setupUi(self, Dialog):
        """
        This function initializes the window by altering the *Dialog* object passed (by reference) to it.

        :param Dialog: This must be of type PyQt5.QtWidgets.QDialog.
        """

        # set window name, size, icon
        Dialog.setObjectName("Settings - Serial Port Connection")
        Dialog.resize(454, 302)
        Dialog.setWindowIcon(QtGui.QIcon('resources/gear.ico'))

        # make a grid layout
        # grid layouts allow the window to be resized easily
        self.gridLayout = QtWidgets.QGridLayout(Dialog)
        self.gridLayout.setObjectName("gridLayout")

        # the following spacer items organize the objects in the window nicely
        spacerItem = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.gridLayout.addItem(spacerItem, 2, 0, 1, 1)
        spacerItem1 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout.addItem(spacerItem1, 1, 1, 1, 1)

        # create a save and cancel button, these are built in buttons that emit specific signals
        self.settings_port_connection_buttons = QtWidgets.QDialogButtonBox(Dialog)
        self.settings_port_connection_buttons.setOrientation(QtCore.Qt.Horizontal)
        self.settings_port_connection_buttons.setStandardButtons(QtWidgets.QDialogButtonBox.Cancel|QtWidgets.QDialogButtonBox.Save)
        self.settings_port_connection_buttons.setObjectName("settings_port_connection_buttons")
        self.gridLayout.addWidget(self.settings_port_connection_buttons, 2, 1, 1, 2)

        # make the serial port list widget
        # it will populate with all the available serial ports
        self.listWidget_available_ports = QtWidgets.QListWidget(Dialog)
        self.listWidget_available_ports.setObjectName("listWidget_available_ports")
        self.gridLayout.addWidget(self.listWidget_available_ports, 1, 0, 1, 1)

        # create a label for the list
        self.label = QtWidgets.QLabel(Dialog)
        self.label.setObjectName("label")
        self.gridLayout.addWidget(self.label, 0, 0, 1, 1)

        # make a button to clear the serial port connection
        self.pushButton = QtWidgets.QPushButton(Dialog)
        self.pushButton.setObjectName("pushButton")
        self.gridLayout.addWidget(self.pushButton, 0, 1, 1, 1)
        self.pushButton.clicked.connect(self.reset)

        # make a button to rescan the available serial ports
        self.pushButtonScan = QtWidgets.QPushButton(Dialog)
        self.pushButtonScan.setObjectName("pushButtonScan")
        self.gridLayout.addWidget(self.pushButtonScan, 0, 2, 1, 1)
        self.pushButtonScan.clicked.connect(self.populate_list)

        # get the saved serial port if it exists
        self.port = read_port_configuration()
        # fill the list with the available serial ports
        self.populate_list()
        # highlight the saved option if it exists
        self.highlight_port()

        # move the objects over to Dialog and set the text
        self.retranslateUi(Dialog)

        # set what to do when the save button is clicked
        self.settings_port_connection_buttons.accepted.connect(lambda: self.save_list_selection(Dialog))

        # set what to do when the cancel button is hit
        self.settings_port_connection_buttons.rejected.connect(Dialog.reject)

        # connect the signals and slots by name
        QtCore.QMetaObject.connectSlotsByName(Dialog)

    def retranslateUi(self, Dialog):
        """
        This function translates the GUI objects of this class to the passed *Dialog* objcect,
        then sets the text of the various objects in the window.

        :param Dialog: This must be of type PyQt5.QtWidgets.QDialog.
        """

        # rename the function for readability
        _translate = QtCore.QCoreApplication.translate

        # set the window title and button text
        Dialog.setWindowTitle(_translate("Dialog", "Settings - Serial Port Connection"))
        self.pushButton.setText(_translate("Dialog", "Reset"))
        self.pushButtonScan.setText(_translate("Dialog", "Scan"))
        self.label.setText(_translate("Dialog", "Select from the available COM Ports.\nWarning: using an incorrect "
                                                "port may cause the program to crash."))

    def highlight_port(self):
        """
        This function will highlight the saved serial port if it still exists in the list.
        """

        # search the list for the saved serial port
        temp = ""
        for p in self.ports:
            if self.port == p.device:
                temp = p.description
                break

        # iterate through the list text again and highlight the saved option
        for x in range(0, self.listWidget_available_ports.count()):
            if self.listWidget_available_ports.item(x).text() == temp:
                self.listWidget_available_ports.item(x).setSelected(True)
                break

    def populate_list(self):
        """
        This function currently only works for Windows. It well use the *serial.tools.list_ports_windows.comports()*
        function to get all available serial ports. Then it will add the names to the list widget.
        """

        # clear the list
        self.listWidget_available_ports.clear()

        # search for all available serial ports and add it to a list
        self.ports = list_ports_windows.comports()

        # iterate through and add the description text to the list widget
        for p in self.ports:
            item = QtWidgets.QListWidgetItem(p.description)
            self.listWidget_available_ports.addItem(item)
        # highlight the saved port if it exists
        self.highlight_port()

    def save_list_selection(self, Dialog):
        """
        This function uses the helper function in *settings_interface* to save the selected serial port when
        the user hits the save button.

        :param Dialog: This must be of type PyQt5.QtWidgets.QDialog.
        """

        # try to get the text of the selected item
        try:
            description = self.listWidget_available_ports.currentItem().text()
        # if nothing is selected, set the text to an empty string and continue
        except:
            description = ""

        # iterate through the ports and check if the selected text matches
        for p in self.ports:
            if p.description == description:
                # if it matches, get the port text and save it
                self.port = p.device
                save_port_configuration(self.port)
                break
        # close the dialog
        Dialog.accept()

    def reset(self):
        """
        This function clears the serial port selection.
        """
        save_port_configuration("\n")
        self.listWidget_available_ports.clearSelection()


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Dialog = QtWidgets.QDialog()
    ui = Ui_Dialog()
    ui.setupUi(Dialog)
    Dialog.show()
    sys.exit(app.exec_())
